'use client';

import { useState, useEffect, useCallback } from 'react';
import { useForm, Controller, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { ProductCreateSchema, type ProductCreateInput, type BrandSelect } from '@/lib/zodSchemas';
import { createOrUpdateProductAction } from '@/app/products/actions';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Select } from '@/components/ui/Select';
import { Textarea } from '@/components/ui/Textarea';
import { Checkbox } from '@/components/ui/Checkbox';
import { BrandCardPreview } from './BrandCardPreview';
import { MarketplaceLinksField } from './MarketplaceLinksField';
import ImagePickerField from './ImagePickerField';
import { X, Save } from 'lucide-react';

interface ProductCreateEditModalProps {
  isOpen: boolean;
  onClose: () => void;
  product?: any; // Existing product for edit
}

const levelOptions = [
  { value: 'Snapper', label: 'Snapper' },
  { value: 'Seeker', label: 'Seeker' },
  { value: 'Crafter', label: 'Crafter' },
  { value: 'Viralist', label: 'Viralist' },
  { value: 'Qappian', label: 'Qappian' },
];

const stockStatusOptions = [
  { value: 'in_stock', label: 'Stokta' },
  { value: 'low', label: 'Az Stok' },
  { value: 'out_of_stock', label: 'Stok Yok' },
  { value: 'hidden', label: 'Gizli' },
];

const categoryOptions = [
  { value: 'Elektronik', label: 'Elektronik' },
  { value: 'Giyim', label: 'Giyim' },
  { value: 'Ev & Yaşam', label: 'Ev & Yaşam' },
  { value: 'Spor', label: 'Spor' },
  { value: 'Kozmetik', label: 'Kozmetik' },
  { value: 'Kitap', label: 'Kitap' },
  { value: 'Oyuncak', label: 'Oyuncak' },
  { value: 'Diğer', label: 'Diğer' },
];

export function ProductCreateEditModal({ isOpen, onClose, product }: ProductCreateEditModalProps) {
  const [brands, setBrands] = useState<BrandSelect[]>([]);
  const [selectedBrand, setSelectedBrand] = useState<BrandSelect | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const methods = useForm<ProductCreateInput>({
    resolver: zodResolver(ProductCreateSchema),
    defaultValues: {
      title: '',
      description: '',
      usage_terms: '',
      value_qp: 0,
      stock_status: 'in_stock',
      stock_count: undefined,
      category: 'Elektronik',
      levels: [],
      marketplaces: [],
      images: []
    }
  });

  const {
    register,
    handleSubmit,
    control,
    setValue,
    watch,
    reset,
    formState: { errors }
  } = methods;

  // Load brands on mount
  useEffect(() => {
    if (isOpen) {
      loadBrands();
    }
  }, [isOpen]);

  // Load product data for edit
  useEffect(() => {
    if (product && isOpen) {
      console.log('Setting product data:', product);
      console.log('Available brands:', brands);
      
      setValue('id', product.id);
      setValue('title', product.title);
      setValue('description', product.description || '');
      setValue('usage_terms', product.usage_terms || '');
      setValue('value_qp', product.value_qp);
      setValue('stock_status', product.stock_status);
      setValue('stock_count', product.stock_count);
      setValue('category', product.category || 'Elektronik');
      setValue('levels', product.levels || []);
      setValue('marketplaces', product.marketplaces || []);
      setValue('images', []);
      
      // Set brand if available
      console.log('Product brand_id:', product.brand_id);
      console.log('Product brand:', product.brand);
      console.log('Product brand_name:', product.brand_name);
      
      if (product.brand_id) {
        setValue('brand_id', product.brand_id);
        const brand = brands.find(b => b.id === product.brand_id);
        console.log('Found brand:', brand);
        if (brand) {
          setSelectedBrand(brand);
        }
      } else if (product.brand_name) {
        // Try to find brand by name if brand_id is not available
        const brand = brands.find(b => b.name === product.brand_name);
        console.log('Found brand by name:', brand);
        if (brand) {
          setValue('brand_id', brand.id);
          setSelectedBrand(brand);
        }
      }
    }
  }, [product, isOpen, setValue, brands]);

  const loadBrands = useCallback(async () => {
    console.log('Loading brands...');
    try {
      const response = await fetch('/api/brands');
      const result = await response.json();
      console.log('Brands result:', result);
      if (result.success) {
        setBrands(result.brands);
        console.log('Brands loaded:', result.brands);
      } else {
        console.error('Failed to load brands:', result.error);
      }
    } catch (error) {
      console.error('Error loading brands:', error);
    }
  }, []);

  // Load brands when modal opens
  useEffect(() => {
    if (isOpen) {
      loadBrands();
    }
  }, [isOpen, loadBrands]);

  const onSubmit = async (data: ProductCreateInput) => {
    setIsLoading(true);
    try {
      // Convert data to FormData
      const formData = new FormData();
      if (data.id) formData.append('id', data.id);
      formData.append('brand_id', data.brand_id);
      formData.append('title', data.title);
      formData.append('description', data.description || '');
      formData.append('usage_terms', data.usage_terms || '');
      formData.append('value_qp', String(data.value_qp));
      formData.append('stock_status', data.stock_status);
      if (typeof data.stock_count === 'number') formData.append('stock_count', String(data.stock_count));
      formData.append('category', data.category);
      // level is handled in levels array
      // is_active is handled by default in server action
      formData.append('levels', JSON.stringify(data.levels || []));
      formData.append('marketplaces', JSON.stringify(data.marketplaces || []));
      // features is handled separately in the form
      
      // Add images
      if (data.images && data.images.length > 0) {
        data.images.forEach((file, index) => {
          formData.append('images', file, file.name || `image_${index}.jpg`);
        });
      }
      
      const result = await createOrUpdateProductAction(formData);
      
      if (result.ok) {
        onClose();
        reset();
        setSelectedBrand(null);
        // Refresh the page to show new product
        window.location.reload();
      } else {
        alert('Ürün kaydedilirken hata oluştu');
      }
    } catch (error) {
      alert(`Hata: ${error instanceof Error ? error.message : 'Bilinmeyen hata'}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleBrandChange = (brandId: string) => {
    const brand = brands.find(b => b.id === brandId);
    setSelectedBrand(brand || null);
    setValue('brand_id', brandId);
  };

  const handleLevelChange = (level: string, checked: boolean) => {
    const currentLevels = watch('levels') || [];
    if (checked) {
      setValue('levels', [...currentLevels, level as any]);
    } else {
      setValue('levels', currentLevels.filter(l => l !== level));
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg w-full max-w-6xl max-h-[90vh] overflow-hidden flex flex-col">
        <div className="flex flex-1 min-h-0">
          {/* Form Section */}
          <div className="flex-1 p-6 overflow-y-auto min-h-0">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold">
                {product ? 'Ürün Düzenle' : 'Yeni Ürün Ekle'}
              </h2>
              <Button variant="ghost" size="sm" onClick={onClose}>
                <X className="w-4 h-4" />
              </Button>
            </div>

            <FormProvider {...methods}>
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              {/* Brand Selection */}
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Marka *
                </label>
                <Select
                  {...register('brand_id')}
                  onChange={(e) => handleBrandChange(e.target.value)}
                >
                  <option value="">Marka seçin</option>
                  {brands.map(brand => (
                    <option key={brand.id} value={brand.id}>
                      {brand.name}
                    </option>
                  ))}
                </Select>
                {errors.brand_id && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.brand_id.message}
                  </p>
                )}
              </div>

              {/* Brand Preview */}
              <BrandCardPreview brand={selectedBrand} />

              {/* Product Title */}
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Ürün Adı *
                </label>
                <Input
                  {...register('title')}
                  placeholder="Ürün adını girin"
                />
                {errors.title && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.title.message}
                  </p>
                )}
              </div>

              {/* Category */}
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Kategori *
                </label>
                <Select {...register('category')}>
                  {categoryOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </Select>
                {errors.category && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.category.message}
                  </p>
                )}
              </div>

              {/* Marketplace Links */}
              <MarketplaceLinksField />

              {/* Images */}
              <ImagePickerField control={control} name="images" max={5} />

              {/* Description */}
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Açıklama *
                </label>
                <Textarea
                  {...register('description')}
                  placeholder="Ürün açıklaması"
                  rows={4}
                />
                {errors.description && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.description.message}
                  </p>
                )}
              </div>

              {/* Usage Terms */}
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Kullanım Koşulları *
                </label>
                <Textarea
                  {...register('usage_terms')}
                  placeholder="Kullanım koşulları"
                  rows={4}
                />
                {errors.usage_terms && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.usage_terms.message}
                  </p>
                )}
              </div>

              {/* Value and Stock */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    QP Değeri *
                  </label>
                  <Input
                    {...register('value_qp', { valueAsNumber: true })}
                    type="number"
                    min="0"
                    placeholder="0"
                  />
                  {errors.value_qp && (
                    <p className="text-sm text-red-600 mt-1">
                      {errors.value_qp.message}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Stok Durumu *
                  </label>
                  <Select {...register('stock_status')}>
                    {stockStatusOptions.map(option => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </Select>
                  {errors.stock_status && (
                    <p className="text-sm text-red-600 mt-1">
                      {errors.stock_status.message}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Stok Adedi
                  </label>
                  <Input
                    {...register('stock_count', { valueAsNumber: true })}
                    type="number"
                    min="0"
                    placeholder="Opsiyonel"
                  />
                  {errors.stock_count && (
                    <p className="text-sm text-red-600 mt-1">
                      {errors.stock_count.message}
                    </p>
                  )}
                </div>
              </div>

              {/* Levels */}
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Reyonlar
                </label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  {levelOptions.map(option => (
                    <label key={option.value} className="flex items-center space-x-2">
                      <Checkbox
                        checked={watch('levels')?.includes(option.value as any) || false}
                        onChange={(e) => handleLevelChange(option.value, e.target.checked)}
                      />
                      <span className="text-sm text-slate-700">{option.label}</span>
                    </label>
                  ))}
                </div>
                {errors.levels && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.levels.message}
                  </p>
                )}
              </div>

              {/* Submit Buttons */}
              <div className="flex gap-3 pt-6 border-t">
                <Button
                  type="button"
                  variant="ghost"
                  onClick={onClose}
                  className="flex-1"
                >
                  İptal
                </Button>
                <Button
                  type="submit"
                  disabled={isLoading}
                  className="flex-1"
                >
                  <Save className="w-4 h-4 mr-2" />
                  {isLoading ? 'Kaydediliyor...' : 'Kaydet'}
                </Button>
              </div>
              </form>
            </FormProvider>
          </div>

          {/* Preview Section */}
          <div className="w-80 border-l border-slate-200 p-6 bg-slate-50 overflow-y-auto min-h-0">
            <h3 className="text-lg font-semibold mb-4">Canlı Önizleme</h3>
            <div className="space-y-4">
              {/* Mobile Card Preview */}
              <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-4">
                {/* Brand Info */}
                {selectedBrand && (
                  <div className="flex items-center gap-2 mb-3">
                    {selectedBrand.logo_url && (
                      <img
                        src={selectedBrand.logo_url}
                        alt={selectedBrand.name}
                        className="w-8 h-8 rounded"
                      />
                    )}
                    <span className="text-sm font-medium">{selectedBrand.name}</span>
                  </div>
                )}

                {/* Product Images Preview */}
                {watch('images') && Array.isArray(watch('images')) && watch('images')!.length > 0 && (
                  <div className="mb-3">
                    <div className="aspect-video bg-slate-100 rounded overflow-hidden">
                      <img
                        src={URL.createObjectURL(watch('images')![0])}
                        alt="Product preview"
                        className="w-full h-full object-cover"
                      />
                    </div>
                  </div>
                )}

                {/* Product Title */}
                <h4 className="font-semibold text-slate-900 mb-2">
                  {watch('title') || 'Ürün Adı'}
                </h4>

                {/* Category */}
                <div className="mb-2">
                  <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded">
                    {watch('category') || 'Elektronik'}
                  </span>
                </div>

                {/* Description */}
                <p className="text-sm text-slate-600 mb-3 line-clamp-2">
                  {watch('description') || 'Ürün açıklaması burada görünecek...'}
                </p>

                {/* Value and Stock */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className="text-lg font-bold text-amber-600">
                      {watch('value_qp') || 0} QP
                    </span>
                  </div>
                  <div className={`px-2 py-1 rounded text-xs font-medium ${
                    watch('stock_status') === 'in_stock' ? 'bg-green-100 text-green-700' :
                    watch('stock_status') === 'low' ? 'bg-yellow-100 text-yellow-700' :
                    watch('stock_status') === 'out_of_stock' ? 'bg-red-100 text-red-700' :
                    'bg-gray-100 text-gray-700'
                  }`}>
                    {stockStatusOptions.find(s => s.value === watch('stock_status'))?.label || 'Stokta'}
                  </div>
                </div>

                {/* Levels */}
                {watch('levels')?.length > 0 && (
                  <div className="flex flex-wrap gap-1 mt-2">
                    {watch('levels').map((level: string) => (
                      <span
                        key={level}
                        className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded"
                      >
                        {level}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
