import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, StyleSheet, Pressable, Image, Dimensions, Modal } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, router } from 'expo-router';
import { LinearGradient } from 'expo-linear-gradient';
import { card3DStyles } from '@/src/theme/card3D';
import { supabase } from '@/src/lib/supabase';

const { width } = Dimensions.get('window');
const AVATAR_GAP = 6;

export default function MissionDetailScreen() {
  const insets = useSafeAreaInsets();
  const { id } = useLocalSearchParams();
  const [modalVisible, setModalVisible] = useState(false);
  const [showMissionModal, setShowMissionModal] = useState(false);
  const [mission, setMission] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [posts, setPosts] = useState<any[]>([]);
  const [topUsers, setTopUsers] = useState([
    { id: '1', name: 'user1', avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face', likes: 245, rank: 1, level: 'gold' },
    { id: '2', name: 'user2', avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face', likes: 198, rank: 2, level: 'silver' },
    { id: '3', name: 'user3', avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face', likes: 156, rank: 3, level: 'bronze' },
    { id: '4', name: 'user4', avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=100&h=100&fit=crop&crop=face', likes: 134, rank: 4, level: 'bronze' },
    { id: '5', name: 'user5', avatar: 'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=100&h=100&fit=crop&crop=face', likes: 98, rank: 5, level: 'bronze' },
  ]);

  const fetchPosts = async () => {
    try {
      const { data: submissions, error } = await supabase
        .from('submissions')
        .select(`
          id,
          media,
          note,
          likes_count,
          comments_count,
          created_at,
          status,
          profiles!submissions_user_id_fkey (
            id,
            display_name,
            avatar_url
          )
        `)
        .eq('mission_id', id)
        .eq('status', 'approved')
        .order('created_at', { ascending: false });

      if (error) throw error;

      const missionPosts = submissions?.map(submission => ({
        id: submission.id,
        userId: submission.profiles?.id || 'unknown',
        user: submission.profiles?.display_name || 'Kullanıcı',
        avatar: submission.profiles?.avatar_url || 'https://via.placeholder.com/40',
        image: submission.media?.[0]?.path ? 
          `https://your-supabase-url.supabase.co/storage/v1/object/public/mission-media/${submission.media[0].path}` : 
          'https://via.placeholder.com/400',
        likes: submission.likes_count || 0,
        comments: submission.comments_count || 0,
      })) || [];

      setPosts(missionPosts);
    } catch (error) {
      console.error('Posts fetch error:', error);
      // Fallback to mock data
      setPosts([
        {
          id: '1',
          userId: '1',
          user: 'kullanici1',
          avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',
          image: 'https://images.unsplash.com/photo-1495474472287-4d71bcdd2085?w=400&h=400&fit=crop&crop=center',
          likes: 245,
          comments: 12,
        },
        {
          id: '2',
          userId: '2',
          user: 'kullanici2',
          avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',
          image: 'https://images.unsplash.com/photo-1559056199-641a0ac8b55e?w=400&h=400&fit=crop&crop=center',
          likes: 198,
          comments: 8,
        },
      ]);
    }
  };

  const fetchMission = async () => {
    if (!id) {
      console.log('❌ No mission ID provided');
      return;
    }
    
    console.log('🔍 Fetching mission with ID:', id);
    
    try {
      const { data: missionData, error: missionError } = await supabase
        .from('missions')
        .select(`
          id,
          title,
          brief,
          description,
          cover_url,
          reward_qp,
          starts_at,
          ends_at,
          brand_id
        `)
        .eq('id', id)
        .single();

      if (missionError) {
        console.error('❌ Mission fetch error:', missionError);
        return;
      }
      
      // Get brand data
      let brandData = null;
      if (missionData.brand_id) {
        const { data: brand, error: brandError } = await supabase
          .from('brands')
          .select(`
            id,
            name,
            logo_url,
            brand_profiles (
              avatar_url,
              cover_url
            )
          `)
          .eq('id', missionData.brand_id)
          .single();

        if (!brandError) {
          brandData = brand;
        }
      }

      // Calculate time left
      const now = new Date();
      const endTime = missionData.ends_at ? new Date(missionData.ends_at) : null;
      const timeLeft = endTime ? Math.max(0, endTime.getTime() - now.getTime()) : null;
      
      let timeLeftText = '';
      if (timeLeft !== null) {
        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        
        if (days > 0) {
          timeLeftText = `${days}g ${hours}s`;
        } else if (hours > 0) {
          timeLeftText = `${hours}s ${minutes}d`;
        } else {
          timeLeftText = `${minutes}dk`;
        }
      }

      const mappedMission = {
        id: missionData.id,
        title: missionData.title,
        brief: missionData.brief,
        description: missionData.description,
        coverUrl: missionData.cover_url,
        qpValue: missionData.reward_qp,
        timeLeft: timeLeftText,
        brand: brandData ? {
          id: brandData.id,
          name: brandData.name,
          logoUrl: brandData.logo_url || brandData.brand_profiles?.avatar_url,
          coverUrl: brandData.brand_profiles?.cover_url
        } : null,
        totalLikes: 245,
        totalPosts: 12,
      };
      
      setMission(mappedMission);
    } catch (err) {
      console.error('❌ Mission fetch error:', err);
      setMission(null);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const loadData = async () => {
      await fetchMission();
      await fetchPosts();
    };
    
    loadData();
  }, [id]);

  const getRankColor = (rank: number) => {
    switch (rank) {
      case 1: return '#ffd700';
      case 2: return '#c0c0c0';
      case 3: return '#cd7f32';
      default: return '#000';
    }
  };

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'gold': return '#ffd700';
      case 'silver': return '#c0c0c0';
      case 'bronze': return '#cd7f32';
      default: return '#6b7280';
    }
  };

  const PostCard = ({ post }: { post: any }) => (
    <View style={styles.postCard}>
      <View style={styles.postHeader}>
        <Image source={{ uri: post.avatar }} style={styles.postAvatar} />
        <Text style={styles.postUsername}>{post.user}</Text>
      </View>
      <Image source={{ uri: post.image }} style={styles.postImage} />
      <View style={styles.postActions}>
        <Pressable style={styles.postAction}>
          <Ionicons name="heart" size={20} color="#ef4444" />
          <Text style={styles.postActionText}>{post.likes}</Text>
        </Pressable>
        <Pressable style={styles.postAction}>
          <Ionicons name="chatbubble" size={20} color="#6b7280" />
          <Text style={styles.postActionText}>{post.comments}</Text>
        </Pressable>
      </View>
    </View>
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>Yükleniyor...</Text>
      </View>
    );
  }

  if (!mission) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Görev bulunamadı</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {/* Mission Detail Card - Full Screen Overlay */}
        <View style={styles.missionCardOverlay}>
          {/* Background Image with Blur Effect */}
          <Image 
            source={{ uri: mission.coverUrl || 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=800&q=80' }} 
            style={styles.backgroundImage}
            blurRadius={10}
          />
          
          {/* Semi-transparent overlay */}
          <View style={styles.overlay} />
          
          {/* Content */}
          <View style={styles.cardContent}>
            {/* Top Row - QP Badge and Timer */}
            <View style={styles.topRow}>
              {/* QP Badge */}
              <View style={styles.qpBadge}>
                <LinearGradient
                  colors={['#f59e0b', '#d97706', '#b45309']}
                  start={{ x: 0, y: 0 }}
                  end={{ x: 1, y: 1 }}
                  style={styles.qpBadgeGradient}
                >
                  <Text style={styles.qpBadgeText}>{mission.qpValue} QP</Text>
                </LinearGradient>
              </View>
              
              {/* Timer Badge */}
              <View style={styles.timerBadge}>
                <Text style={styles.timerText}>{mission.timeLeft || 'Süresiz'}</Text>
              </View>
            </View>

            {/* Mission Description */}
            <View style={styles.descriptionContainer}>
              <Text style={styles.missionDescriptionText}>
                {mission.description || 'Mavi benim rengim diyorsan gel ve göster! En güzel Mavi kombinini paylaş.'}
              </Text>
              <Pressable onPress={() => setModalVisible(true)}>
                <Text style={styles.readMoreText}>devamı...</Text>
              </Pressable>
            </View>

            {/* Bottom Row - Stats and Qappishle Button */}
            <View style={styles.bottomRow}>
              {/* Post Count */}
              <View style={styles.statBadge}>
                <Ionicons name="images" size={16} color="#374151" />
                <Text style={styles.statBadgeText}>{mission.totalPosts}</Text>
              </View>

              {/* Qappishle Button */}
              <Pressable 
                style={({ pressed }) => [
                  styles.qappishleButton,
                  { opacity: pressed ? 0.9 : 1 }
                ]}
                onPress={() => router.push(`/submit/${id}`)}
              >
                <LinearGradient
                  colors={['#3b82f6', '#1d4ed8', '#1e40af']}
                  start={{ x: 0, y: 0 }}
                  end={{ x: 1, y: 0 }}
                  style={styles.qappishleGradient}
                >
                  <Ionicons name="camera" size={20} color="#ffffff" />
                  <Text style={styles.qappishleText}>Qappish'le!</Text>
                </LinearGradient>
              </Pressable>

              {/* Like Count */}
              <View style={styles.statBadge}>
                <Ionicons name="heart" size={16} color="#374151" />
                <Text style={styles.statBadgeText}>{mission.totalLikes.toLocaleString()}</Text>
              </View>
            </View>
          </View>
        </View>

        {/* Posts Section */}
        <View style={styles.postsSection}>
          {posts.map((post) => (
            <PostCard key={post.id} post={post} />
          ))}
        </View>
      </ScrollView>

      {/* Full Description Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Görev Detayı</Text>
              <Pressable onPress={() => setModalVisible(false)}>
                <Ionicons name="close" size={24} color="#1e293b" />
              </Pressable>
            </View>
            <Text style={styles.modalDescription}>{mission.description}</Text>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  scrollView: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#6b7280',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorText: {
    fontSize: 16,
    color: '#ef4444',
  },
  missionCardOverlay: {
    height: 400,
    position: 'relative',
    margin: 16,
    borderRadius: 20,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.3,
    shadowRadius: 16,
    elevation: 12,
  },
  backgroundImage: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
  },
  cardContent: {
    flex: 1,
    padding: 20,
    justifyContent: 'space-between',
  },
  topRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  qpBadge: {
    borderRadius: 20,
    overflow: 'hidden',
    shadowColor: '#f59e0b',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.4,
    shadowRadius: 8,
    elevation: 8,
  },
  qpBadgeGradient: {
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  qpBadgeText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#ffffff',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  timerBadge: {
    backgroundColor: 'rgba(55, 65, 81, 0.9)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  timerText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#ffffff',
  },
  descriptionContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 20,
  },
  missionDescriptionText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#ffffff',
    textAlign: 'center',
    lineHeight: 26,
    textShadowColor: 'rgba(0, 0, 0, 0.5)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 3,
  },
  readMoreText: {
    fontSize: 14,
    color: '#ffffff',
    marginTop: 8,
    fontWeight: '500',
    textShadowColor: 'rgba(0, 0, 0, 0.5)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  bottomRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  statBadge: {
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    gap: 6,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
  },
  statBadgeText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
  },
  qappishleButton: {
    flex: 1,
    marginHorizontal: 16,
    borderRadius: 25,
    overflow: 'hidden',
    shadowColor: '#3b82f6',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  qappishleGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 24,
    gap: 8,
  },
  qappishleText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#ffffff',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  postsSection: {
    paddingHorizontal: 16,
    marginBottom: 20,
  },
  postCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  postHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
  },
  postAvatar: {
    width: 32,
    height: 32,
    borderRadius: 16,
    marginRight: 8,
  },
  postUsername: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1e293b',
  },
  postImage: {
    width: '100%',
    height: 200,
    resizeMode: 'cover',
  },
  postActions: {
    flexDirection: 'row',
    padding: 12,
    gap: 16,
  },
  postAction: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  postActionText: {
    fontSize: 14,
    color: '#6b7280',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#ffffff',
    borderRadius: 16,
    padding: 20,
    margin: 20,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1e293b',
  },
  modalDescription: {
    fontSize: 16,
    color: '#1e293b',
    lineHeight: 24,
  },
});